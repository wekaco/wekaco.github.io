<ptrack>
  <article>
      <figure
        id={ state.uri }
        style={ `background-image: url('${ props.input.cover }')` }>
      </figure>
      <h2>{ props.input.title }</h2>
      <h3>{ props.input.username }</h3>
      <iframe
        id="widget-{ state.uri }"
        scrolling="no"
        class={ state.hide }
        src={ state.url }
        frameborder="no"
        onload={ foo }></iframe>
  </article>
  <style>
    :host {
        --figure-height: 20vh;
        --figure-background-size: 80%;
        --host-height: 50vh; 
    }
    /* For phone devices */
    @media (min-width: 360px) {
      :host {
        --figure-height: 60vh;
        --figure-background-size: 90%;
        --host-height: 100vh; 
      }
    }
    /* For tablet devices */
    @media (min-width: 720px) {
      :host {
        --figure-width: 40%;
        --figure-background-size: 60%;
        --figure-height: 80vh;
      }
      figure {
        float: left;
        width: var(--figure-width);
      }
    }

    @media (min-width: 1024px) {
      :host {
        --figure-background-size: 20%;
        --figure-height: 40vh;
        padding-top: 20vh;
        --host-height: 100vh; 
      
      }
      figure {
        float: none;
        width: auto;
      }
    }
    :host article {
      display: block;
      height: var(--host-height);
    }
    figure {
      display: flex;
      height: var(--figure-height);
      background-attachment: fixed;
      background-position: top;
      /** background-repeat: no-repeat; **/
      background-size: var(--figure-background-size);
    }
    article  {
    }
    article h2 {
      margin-top: 0;
    }
    .hide {
      visibility: hidden;
      display: none;
      width: 0;
      height: 0;
    }
  </style>
  <script>
    const noop = ()=>{};
  
    const SC_STREAM = 'stream_ready';
    export default function PTrack() {
      return {
        state: {
          uri: null, 
          hide: 'hide',
          url: null,
        },
        onBeforeMount(props, state) {
          state.uri = props.input.uri;
          const params = new URLSearchParams('auto_play=false&buying=false&liking=false&download=false&sharing=false&show_artwork=false&show_comments=false&show_playcount=false&show_user=false&hide_related=false&visual=false&start_track=0&callback=true');

          params.set('url', props.input.permalink_url);
          const url = new URL('https://w.soundcloud.com/player/');
          url.search = params.toString();

          state.url = url.toString();
        },
        foo() {
          console.log('loaded');
        },
        onMounted(props, state) {
          const onStreamReady = props.onStreamReady || noop;
          this.root.addEventListener(SC_STREAM, onStreamReady);

          const player = SC.Widget(this.root.querySelector('iframe'));
          player.bind(SC.Widget.Events.READY, () => {
            const detail = { uri: state.uri, player };
            this.root
              .dispatchEvent(new CustomEvent(SC_STREAM, { detail }));
          });
          player.bind(SC.Widget.Events.ERROR, (err) => {
            const detail = {
              uri: state.uri,
              err: new Error(err.message, 'widget error')
            };
            this.root
              .dispatchEvent(new CustomEvent(SC_STREAM, { detail }));

            this.unmount(); 
          });
        }
      };
    };
  </script>
</ptrack>
