<ptrack>
  <article>
    <figure>
      <img src={ props.input.cover } />
    </figure>
      <h2>{ props.input.title }</h2>
      <h3>{ props.input.username }</h3>
      <button
        name="play"
        onclick={ play }
        disabled={ state.disabled }>Play
      </button>
      <button
        name="stop"
        onclick={ pause }>Stop
      </button>
  </article>
  <style>
    /* For phone devices */
    @media (min-width: 360px) {
      :host {
        --figure-width: 100%;
        --figure-margin: 0 0 16px 0;
      }
    }
    /* For tablet devices */
    @media (min-width: 640px) {
      :host {
        --figure-width: 40%;
        --figure-margin: 0 16px 32px 16px;
      }
      figure {
        float: left;
      }
    }

    @media (min-width: 1024px) {
      :host {
        --figure-width: 20%;
        --figure-margin: 0 0 16px 0;
      }
    }
    :host article {
      height: 100vh; 
    }
    figure {
      display: flex;
    }
    figure {
      margin: var(--figure-margin);
      width: var(--figure-width);
    }
    figure img { 
      width: 100%;
    }

    article { 
      width: 100%;
    }
  </style>
  <script>
    const noop = ()=>{};
    
    const SC_STREAM = 'stream_ready';
    export default function PTrack() {
      return {
        state: {
          url: null,
          player: null,
          disabled: 'disabled',
        },
        onBeforeMount(props, state) {
          this.root.addEventListener(SC_STREAM, props.onStreamReady || noop);

          const id = this.props.input.id;
          SC.stream(`/tracks/${id}`).then( player => {
            this.root.dispatchEvent(new Event(SC_STREAM, { id, player }));
            state.player = player;
            this.update({ disabled: false });
          });
        },
        play() {
          this.state.player.play();
        },
        pause() {
          this.state.player.pause();
        }
      };
    };
/**
    (() => {
    console.clear();
    SC.initialize({
    client_id: 'a9d29aaf9a0cc170e7ee6ab980a6ad49'
    });

    let _current = null;
    let _is_playing = false;

    function isPlaying() {
    return _is_playing;
    }
    function getCurrentPlayer() {
    return _current;
    }
    function stop() {
    if (isPlaying()) {
    getCurrentPlayer().pause();
    }
    }

    function setCurrentPlayer(player) {
    stop();
    _current = player;
    return _current;
    }

    document.querySelectorAll('button[name="stop"]')
    .forEach( btn => btn.addEventListener('click', stop));


    Array.from(document.querySelectorAll('button[name="play"]'))
    .map( btn => SC.resolve(btn.value)
    .then( track => SC.stream(`/tracks/${track.id}`))
    .then( player => {
    btn.addEventListener('click', (e) => {
    setCurrentPlayer(player).play();
    // TODO: replace with event listener on player
    _is_playing = true;
    });
    })
    );
    })();**/
  </script>
</ptrack>
