<app>
  <section>
    <ptrack
      each={ input in state.articles }
      input={ input }
      onStreamReady={ onStreamReady } ></ptrack> 
  </section>
  <style>
    :host {
      --section-width: 100%;
    }
    @media (min-width: 360px) {
      :host {
        --section-width: 100%;
      }
    }
    /* For tablet devices */
    @media (min-width: 720px) {
      :host {
      }
    }

    @media (min-width: 1024px) {
      :host {
        --section-width: 80%;
      }
      section {
        margin: auto;
      }
    }

    section {
      width: var(--section-width);
    }
  </style>
  <script>
    import Nanobar from 'nanobar';
    import PTrack from './ptrack.riot';

    export default {
      state: {
        progress: null,
        articles: [],
        streams: new Set(),
      },
      components: {
        PTrack
      },
      onBeforeMount(props, state) {
        SC.initialize({
          client_id: this.props.client_id
        });
        state.articles = props.tracks
          .filter( t => [ 520565400, 555134337 ].indexOf(parseInt(t.id)) === -1)
          .map( t => ({
            id: t.id,
            title: t.title,
            username: t.user.username,
            cover: t.artwork_url.replace('large', 't500x500'),
          }));
      },
      onMounted(props, state) {
        state.progress = new Nanobar();
      },
      onUpdated() {
        console.log('updated');
      },
      onStreamReady(evt) {
        const { id, player } = evt.detail;
        this.state.streams.add(player);

        const p = this.state.streams.size / this.state.articles.length;
        this.state.progress.go(Math.floor(p * 100));
      }
    };
  </script>
</app>
