<app>
  <section>
    <ptrack
      each={ input in state.articles }
      input={ input }
      onStreamReady={ onStreamReady } ></ptrack> 
  </section>
  <footer>
      <button
        name="play"
        onclick={ play }
        disabled={ state.disabled }>Play
      </button>
  </footer>
  <style>
    :host {
      --section-width: 100%;
    }
    @media (min-width: 360px) {
      :host {
        --section-width: 100%;
      }
    }
    /* For tablet devices */
    @media (min-width: 720px) {
      :host {
      }
    }

    @media (min-width: 1024px) {
      :host {
        --section-width: 80%;
      }
      section {
        margin: auto;
      }
    }

    section {
      width: var(--section-width);
    }
    footer {
      position: fixed;
      bottom: 0;
    }
  </style>
  <script>
    import Nanobar from 'nanobar';
    import PTrack from './ptrack.riot';
    function shuffle(a) {
      for (let i = a.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
          [a[i], a[j]] = [a[j], a[i]];
      }
      return a;
    }
    export default {
      state: {
        progress: null,
        articles: [],
        streams: new Map(),
        current: null,
        playlist: [],
        disabled: 'disabled',
        nextIn: null,
      },
      components: {
        PTrack
      },
      onBeforeMount(props, state) {
        state.articles = props.tracks
          //.map( t => { console.log(t); return t; })
          .filter( t => [ 520565400, 555134337 ].indexOf(parseInt(t.id)) === -1)
          .map( t => ({
            uri: `tracks/${t.id}`,
            title: t.title,
            username: t.user.username,
            cover: t.artwork_url.replace('large', 't500x500'),
            permalink_url: t.permalink_url,
          }));
      },
      onMounted(props, state) {
        state.progress = new Nanobar();
      },
      onUpdated() {
        console.log('updated');
      },
      onStreamReady(evt) {
        let PREVIEW_MS = 30000;
        const { uri, player, err } = evt.detail;
        if (err) {
          const i = this.state.articles.findIndex( a => a.uri === uri );
          this.state.articles = this.state.articles.splice(i, 1);
        } else {
          player.bind(SC.Widget.Events.PLAY, () => {
            if (this.state.nextIn) {
              clearTimeout(this.state.nextIn);
            }
            this.state.nextIn = setTimeout(() => {
               this.stop();
               this.play();
            }, PREVIEW_MS);
          });
          player.bind(SC.Widget.Events.PLAY_PROGRESS, (evt) => {
            const { currentPosition } = evt;
            const p = Math.floor( (currentPosition * 100)/PREVIEW_MS );
            this.state.progress.go(p);
          });
          this.state.streams.set(uri, player);
          if (this.state.disabled === 'disabled') {
            this.update({ disabled: false });
          }
        }
        const p = Math.floor( (this.state.streams.size * 100)/this.state.articles.length);
        this.state.progress.go(p);
      },
      stop() {
        if (this.state.current) {
          this.state.current.stream.pause();
        }
      },
      play() {
        // shuffle the playlist
        if (this.state.playlist.length === 0) {
          this.state.playlist = shuffle(Array.from(this.state.streams.keys()));
        }
        // scroll to article (TODO: human readable id here)
        const uri = this.state.playlist.pop();
        window.location.hash = uri;

        const stream = this.state.streams.get(uri);
        stream.play();

        this.state.current = { uri, stream };
      },
    };
  </script>
</app>
